// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/proto/colibri (interfaces: ColibriClient,ColibriServer)

// Package mock_colibri is a generated GoMock package.
package mock_colibri

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	colibri "github.com/scionproto/scion/go/pkg/proto/colibri"
	grpc "google.golang.org/grpc"
)

// MockColibriClient is a mock of ColibriClient interface.
type MockColibriClient struct {
	ctrl     *gomock.Controller
	recorder *MockColibriClientMockRecorder
}

// MockColibriClientMockRecorder is the mock recorder for MockColibriClient.
type MockColibriClientMockRecorder struct {
	mock *MockColibriClient
}

// NewMockColibriClient creates a new mock instance.
func NewMockColibriClient(ctrl *gomock.Controller) *MockColibriClient {
	mock := &MockColibriClient{ctrl: ctrl}
	mock.recorder = &MockColibriClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriClient) EXPECT() *MockColibriClientMockRecorder {
	return m.recorder
}

// ActivateSegmentIndex mocks base method.
func (m *MockColibriClient) ActivateSegmentIndex(arg0 context.Context, arg1 *colibri.Request, arg2 ...grpc.CallOption) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateSegmentIndex indicates an expected call of ActivateSegmentIndex.
func (mr *MockColibriClientMockRecorder) ActivateSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSegmentIndex", reflect.TypeOf((*MockColibriClient)(nil).ActivateSegmentIndex), varargs...)
}

// AddAdmissionEntry mocks base method.
func (m *MockColibriClient) AddAdmissionEntry(arg0 context.Context, arg1 *colibri.DaemonAdmissionEntry, arg2 ...grpc.CallOption) (*colibri.DaemonAdmissionEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAdmissionEntry", varargs...)
	ret0, _ := ret[0].(*colibri.DaemonAdmissionEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdmissionEntry indicates an expected call of AddAdmissionEntry.
func (mr *MockColibriClientMockRecorder) AddAdmissionEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmissionEntry", reflect.TypeOf((*MockColibriClient)(nil).AddAdmissionEntry), varargs...)
}

// CleanupE2EIndex mocks base method.
func (m *MockColibriClient) CleanupE2EIndex(arg0 context.Context, arg1 *colibri.Request, arg2 ...grpc.CallOption) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupE2EIndex", varargs...)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupE2EIndex indicates an expected call of CleanupE2EIndex.
func (mr *MockColibriClientMockRecorder) CleanupE2EIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupE2EIndex", reflect.TypeOf((*MockColibriClient)(nil).CleanupE2EIndex), varargs...)
}

// CleanupReservation mocks base method.
func (m *MockColibriClient) CleanupReservation(arg0 context.Context, arg1 *colibri.DaemonCleanupRequest, arg2 ...grpc.CallOption) (*colibri.DaemonCleanupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupReservation", varargs...)
	ret0, _ := ret[0].(*colibri.DaemonCleanupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupReservation indicates an expected call of CleanupReservation.
func (mr *MockColibriClientMockRecorder) CleanupReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupReservation", reflect.TypeOf((*MockColibriClient)(nil).CleanupReservation), varargs...)
}

// CleanupSegmentIndex mocks base method.
func (m *MockColibriClient) CleanupSegmentIndex(arg0 context.Context, arg1 *colibri.Request, arg2 ...grpc.CallOption) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupSegmentIndex indicates an expected call of CleanupSegmentIndex.
func (mr *MockColibriClientMockRecorder) CleanupSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSegmentIndex", reflect.TypeOf((*MockColibriClient)(nil).CleanupSegmentIndex), varargs...)
}

// ConfirmSegmentIndex mocks base method.
func (m *MockColibriClient) ConfirmSegmentIndex(arg0 context.Context, arg1 *colibri.Request, arg2 ...grpc.CallOption) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSegmentIndex indicates an expected call of ConfirmSegmentIndex.
func (mr *MockColibriClientMockRecorder) ConfirmSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSegmentIndex", reflect.TypeOf((*MockColibriClient)(nil).ConfirmSegmentIndex), varargs...)
}

// ListReservations mocks base method.
func (m *MockColibriClient) ListReservations(arg0 context.Context, arg1 *colibri.ListRequest, arg2 ...grpc.CallOption) (*colibri.ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservations", varargs...)
	ret0, _ := ret[0].(*colibri.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockColibriClientMockRecorder) ListReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockColibriClient)(nil).ListReservations), varargs...)
}

// ListStitchables mocks base method.
func (m *MockColibriClient) ListStitchables(arg0 context.Context, arg1 *colibri.ListStitchablesRequest, arg2 ...grpc.CallOption) (*colibri.ListStitchablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStitchables", varargs...)
	ret0, _ := ret[0].(*colibri.ListStitchablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStitchables indicates an expected call of ListStitchables.
func (mr *MockColibriClientMockRecorder) ListStitchables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStitchables", reflect.TypeOf((*MockColibriClient)(nil).ListStitchables), varargs...)
}

// SetupE2E mocks base method.
func (m *MockColibriClient) SetupE2E(arg0 context.Context, arg1 *colibri.E2ESetupRequest, arg2 ...grpc.CallOption) (*colibri.E2ESetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupE2E", varargs...)
	ret0, _ := ret[0].(*colibri.E2ESetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupE2E indicates an expected call of SetupE2E.
func (mr *MockColibriClientMockRecorder) SetupE2E(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupE2E", reflect.TypeOf((*MockColibriClient)(nil).SetupE2E), varargs...)
}

// SetupReservation mocks base method.
func (m *MockColibriClient) SetupReservation(arg0 context.Context, arg1 *colibri.DaemonSetupRequest, arg2 ...grpc.CallOption) (*colibri.DaemonSetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupReservation", varargs...)
	ret0, _ := ret[0].(*colibri.DaemonSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupReservation indicates an expected call of SetupReservation.
func (mr *MockColibriClientMockRecorder) SetupReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupReservation", reflect.TypeOf((*MockColibriClient)(nil).SetupReservation), varargs...)
}

// SetupSegment mocks base method.
func (m *MockColibriClient) SetupSegment(arg0 context.Context, arg1 *colibri.SegmentSetupRequest, arg2 ...grpc.CallOption) (*colibri.SegmentSetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupSegment", varargs...)
	ret0, _ := ret[0].(*colibri.SegmentSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupSegment indicates an expected call of SetupSegment.
func (mr *MockColibriClientMockRecorder) SetupSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupSegment", reflect.TypeOf((*MockColibriClient)(nil).SetupSegment), varargs...)
}

// TeardownSegment mocks base method.
func (m *MockColibriClient) TeardownSegment(arg0 context.Context, arg1 *colibri.Request, arg2 ...grpc.CallOption) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TeardownSegment", varargs...)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeardownSegment indicates an expected call of TeardownSegment.
func (mr *MockColibriClientMockRecorder) TeardownSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownSegment", reflect.TypeOf((*MockColibriClient)(nil).TeardownSegment), varargs...)
}

// MockColibriServer is a mock of ColibriServer interface.
type MockColibriServer struct {
	ctrl     *gomock.Controller
	recorder *MockColibriServerMockRecorder
}

// MockColibriServerMockRecorder is the mock recorder for MockColibriServer.
type MockColibriServerMockRecorder struct {
	mock *MockColibriServer
}

// NewMockColibriServer creates a new mock instance.
func NewMockColibriServer(ctrl *gomock.Controller) *MockColibriServer {
	mock := &MockColibriServer{ctrl: ctrl}
	mock.recorder = &MockColibriServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriServer) EXPECT() *MockColibriServerMockRecorder {
	return m.recorder
}

// ActivateSegmentIndex mocks base method.
func (m *MockColibriServer) ActivateSegmentIndex(arg0 context.Context, arg1 *colibri.Request) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateSegmentIndex indicates an expected call of ActivateSegmentIndex.
func (mr *MockColibriServerMockRecorder) ActivateSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSegmentIndex", reflect.TypeOf((*MockColibriServer)(nil).ActivateSegmentIndex), arg0, arg1)
}

// AddAdmissionEntry mocks base method.
func (m *MockColibriServer) AddAdmissionEntry(arg0 context.Context, arg1 *colibri.DaemonAdmissionEntry) (*colibri.DaemonAdmissionEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmissionEntry", arg0, arg1)
	ret0, _ := ret[0].(*colibri.DaemonAdmissionEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdmissionEntry indicates an expected call of AddAdmissionEntry.
func (mr *MockColibriServerMockRecorder) AddAdmissionEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmissionEntry", reflect.TypeOf((*MockColibriServer)(nil).AddAdmissionEntry), arg0, arg1)
}

// CleanupE2EIndex mocks base method.
func (m *MockColibriServer) CleanupE2EIndex(arg0 context.Context, arg1 *colibri.Request) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupE2EIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupE2EIndex indicates an expected call of CleanupE2EIndex.
func (mr *MockColibriServerMockRecorder) CleanupE2EIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupE2EIndex", reflect.TypeOf((*MockColibriServer)(nil).CleanupE2EIndex), arg0, arg1)
}

// CleanupReservation mocks base method.
func (m *MockColibriServer) CleanupReservation(arg0 context.Context, arg1 *colibri.DaemonCleanupRequest) (*colibri.DaemonCleanupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupReservation", arg0, arg1)
	ret0, _ := ret[0].(*colibri.DaemonCleanupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupReservation indicates an expected call of CleanupReservation.
func (mr *MockColibriServerMockRecorder) CleanupReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupReservation", reflect.TypeOf((*MockColibriServer)(nil).CleanupReservation), arg0, arg1)
}

// CleanupSegmentIndex mocks base method.
func (m *MockColibriServer) CleanupSegmentIndex(arg0 context.Context, arg1 *colibri.Request) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupSegmentIndex indicates an expected call of CleanupSegmentIndex.
func (mr *MockColibriServerMockRecorder) CleanupSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSegmentIndex", reflect.TypeOf((*MockColibriServer)(nil).CleanupSegmentIndex), arg0, arg1)
}

// ConfirmSegmentIndex mocks base method.
func (m *MockColibriServer) ConfirmSegmentIndex(arg0 context.Context, arg1 *colibri.Request) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSegmentIndex indicates an expected call of ConfirmSegmentIndex.
func (mr *MockColibriServerMockRecorder) ConfirmSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSegmentIndex", reflect.TypeOf((*MockColibriServer)(nil).ConfirmSegmentIndex), arg0, arg1)
}

// ListReservations mocks base method.
func (m *MockColibriServer) ListReservations(arg0 context.Context, arg1 *colibri.ListRequest) (*colibri.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockColibriServerMockRecorder) ListReservations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockColibriServer)(nil).ListReservations), arg0, arg1)
}

// ListStitchables mocks base method.
func (m *MockColibriServer) ListStitchables(arg0 context.Context, arg1 *colibri.ListStitchablesRequest) (*colibri.ListStitchablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStitchables", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ListStitchablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStitchables indicates an expected call of ListStitchables.
func (mr *MockColibriServerMockRecorder) ListStitchables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStitchables", reflect.TypeOf((*MockColibriServer)(nil).ListStitchables), arg0, arg1)
}

// SetupE2E mocks base method.
func (m *MockColibriServer) SetupE2E(arg0 context.Context, arg1 *colibri.E2ESetupRequest) (*colibri.E2ESetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupE2E", arg0, arg1)
	ret0, _ := ret[0].(*colibri.E2ESetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupE2E indicates an expected call of SetupE2E.
func (mr *MockColibriServerMockRecorder) SetupE2E(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupE2E", reflect.TypeOf((*MockColibriServer)(nil).SetupE2E), arg0, arg1)
}

// SetupReservation mocks base method.
func (m *MockColibriServer) SetupReservation(arg0 context.Context, arg1 *colibri.DaemonSetupRequest) (*colibri.DaemonSetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupReservation", arg0, arg1)
	ret0, _ := ret[0].(*colibri.DaemonSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupReservation indicates an expected call of SetupReservation.
func (mr *MockColibriServerMockRecorder) SetupReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupReservation", reflect.TypeOf((*MockColibriServer)(nil).SetupReservation), arg0, arg1)
}

// SetupSegment mocks base method.
func (m *MockColibriServer) SetupSegment(arg0 context.Context, arg1 *colibri.SegmentSetupRequest) (*colibri.SegmentSetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupSegment", arg0, arg1)
	ret0, _ := ret[0].(*colibri.SegmentSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupSegment indicates an expected call of SetupSegment.
func (mr *MockColibriServerMockRecorder) SetupSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupSegment", reflect.TypeOf((*MockColibriServer)(nil).SetupSegment), arg0, arg1)
}

// TeardownSegment mocks base method.
func (m *MockColibriServer) TeardownSegment(arg0 context.Context, arg1 *colibri.Request) (*colibri.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownSegment", arg0, arg1)
	ret0, _ := ret[0].(*colibri.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeardownSegment indicates an expected call of TeardownSegment.
func (mr *MockColibriServerMockRecorder) TeardownSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownSegment", reflect.TypeOf((*MockColibriServer)(nil).TeardownSegment), arg0, arg1)
}
