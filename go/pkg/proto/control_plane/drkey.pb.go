// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.3
// source: proto/control_plane/v1/drkey.proto

package control_plane

import (
	context "context"
	drkey "github.com/scionproto/scion/go/pkg/proto/drkey"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_control_plane_v1_drkey_proto protoreflect.FileDescriptor

var file_proto_control_plane_v1_drkey_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x62, 0x0a, 0x11,
	0x44, 0x52, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x04, 0x4c, 0x76, 0x6c, 0x31, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x76, 0x6c, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x76, 0x6c, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xbf, 0x03, 0x0a, 0x11, 0x44, 0x52, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x4c,
	0x76, 0x6c, 0x31, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65,
	0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x4c,
	0x76, 0x6c, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x4c, 0x76, 0x6c, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x41, 0x53, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x53, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x53, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x53, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65,
	0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x02, 0x53, 0x56, 0x12,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x72, 0x6b, 0x65, 0x79, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_control_plane_v1_drkey_proto_goTypes = []interface{}{
	(*drkey.Lvl1Request)(nil),       // 0: proto.drkey.mgmt.v1.Lvl1Request
	(*drkey.IntraLvl1Request)(nil),  // 1: proto.drkey.mgmt.v1.IntraLvl1Request
	(*drkey.ASHostRequest)(nil),     // 2: proto.drkey.mgmt.v1.ASHostRequest
	(*drkey.HostASRequest)(nil),     // 3: proto.drkey.mgmt.v1.HostASRequest
	(*drkey.HostHostRequest)(nil),   // 4: proto.drkey.mgmt.v1.HostHostRequest
	(*drkey.SVRequest)(nil),         // 5: proto.drkey.mgmt.v1.SVRequest
	(*drkey.Lvl1Response)(nil),      // 6: proto.drkey.mgmt.v1.Lvl1Response
	(*drkey.IntraLvl1Response)(nil), // 7: proto.drkey.mgmt.v1.IntraLvl1Response
	(*drkey.ASHostResponse)(nil),    // 8: proto.drkey.mgmt.v1.ASHostResponse
	(*drkey.HostASResponse)(nil),    // 9: proto.drkey.mgmt.v1.HostASResponse
	(*drkey.HostHostResponse)(nil),  // 10: proto.drkey.mgmt.v1.HostHostResponse
	(*drkey.SVResponse)(nil),        // 11: proto.drkey.mgmt.v1.SVResponse
}
var file_proto_control_plane_v1_drkey_proto_depIdxs = []int32{
	0,  // 0: proto.control_plane.v1.DRKeyInterService.Lvl1:input_type -> proto.drkey.mgmt.v1.Lvl1Request
	1,  // 1: proto.control_plane.v1.DRKeyIntraService.IntraLvl1:input_type -> proto.drkey.mgmt.v1.IntraLvl1Request
	2,  // 2: proto.control_plane.v1.DRKeyIntraService.ASHost:input_type -> proto.drkey.mgmt.v1.ASHostRequest
	3,  // 3: proto.control_plane.v1.DRKeyIntraService.HostAS:input_type -> proto.drkey.mgmt.v1.HostASRequest
	4,  // 4: proto.control_plane.v1.DRKeyIntraService.HostHost:input_type -> proto.drkey.mgmt.v1.HostHostRequest
	5,  // 5: proto.control_plane.v1.DRKeyIntraService.SV:input_type -> proto.drkey.mgmt.v1.SVRequest
	6,  // 6: proto.control_plane.v1.DRKeyInterService.Lvl1:output_type -> proto.drkey.mgmt.v1.Lvl1Response
	7,  // 7: proto.control_plane.v1.DRKeyIntraService.IntraLvl1:output_type -> proto.drkey.mgmt.v1.IntraLvl1Response
	8,  // 8: proto.control_plane.v1.DRKeyIntraService.ASHost:output_type -> proto.drkey.mgmt.v1.ASHostResponse
	9,  // 9: proto.control_plane.v1.DRKeyIntraService.HostAS:output_type -> proto.drkey.mgmt.v1.HostASResponse
	10, // 10: proto.control_plane.v1.DRKeyIntraService.HostHost:output_type -> proto.drkey.mgmt.v1.HostHostResponse
	11, // 11: proto.control_plane.v1.DRKeyIntraService.SV:output_type -> proto.drkey.mgmt.v1.SVResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_control_plane_v1_drkey_proto_init() }
func file_proto_control_plane_v1_drkey_proto_init() {
	if File_proto_control_plane_v1_drkey_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_control_plane_v1_drkey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_control_plane_v1_drkey_proto_goTypes,
		DependencyIndexes: file_proto_control_plane_v1_drkey_proto_depIdxs,
	}.Build()
	File_proto_control_plane_v1_drkey_proto = out.File
	file_proto_control_plane_v1_drkey_proto_rawDesc = nil
	file_proto_control_plane_v1_drkey_proto_goTypes = nil
	file_proto_control_plane_v1_drkey_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DRKeyInterServiceClient is the client API for DRKeyInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DRKeyInterServiceClient interface {
	Lvl1(ctx context.Context, in *drkey.Lvl1Request, opts ...grpc.CallOption) (*drkey.Lvl1Response, error)
}

type dRKeyInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDRKeyInterServiceClient(cc grpc.ClientConnInterface) DRKeyInterServiceClient {
	return &dRKeyInterServiceClient{cc}
}

func (c *dRKeyInterServiceClient) Lvl1(ctx context.Context, in *drkey.Lvl1Request, opts ...grpc.CallOption) (*drkey.Lvl1Response, error) {
	out := new(drkey.Lvl1Response)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyInterService/Lvl1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DRKeyInterServiceServer is the server API for DRKeyInterService service.
type DRKeyInterServiceServer interface {
	Lvl1(context.Context, *drkey.Lvl1Request) (*drkey.Lvl1Response, error)
}

// UnimplementedDRKeyInterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDRKeyInterServiceServer struct {
}

func (*UnimplementedDRKeyInterServiceServer) Lvl1(context.Context, *drkey.Lvl1Request) (*drkey.Lvl1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lvl1 not implemented")
}

func RegisterDRKeyInterServiceServer(s *grpc.Server, srv DRKeyInterServiceServer) {
	s.RegisterService(&_DRKeyInterService_serviceDesc, srv)
}

func _DRKeyInterService_Lvl1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.Lvl1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyInterServiceServer).Lvl1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyInterService/Lvl1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyInterServiceServer).Lvl1(ctx, req.(*drkey.Lvl1Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _DRKeyInterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.DRKeyInterService",
	HandlerType: (*DRKeyInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lvl1",
			Handler:    _DRKeyInterService_Lvl1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/drkey.proto",
}

// DRKeyIntraServiceClient is the client API for DRKeyIntraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DRKeyIntraServiceClient interface {
	IntraLvl1(ctx context.Context, in *drkey.IntraLvl1Request, opts ...grpc.CallOption) (*drkey.IntraLvl1Response, error)
	ASHost(ctx context.Context, in *drkey.ASHostRequest, opts ...grpc.CallOption) (*drkey.ASHostResponse, error)
	HostAS(ctx context.Context, in *drkey.HostASRequest, opts ...grpc.CallOption) (*drkey.HostASResponse, error)
	HostHost(ctx context.Context, in *drkey.HostHostRequest, opts ...grpc.CallOption) (*drkey.HostHostResponse, error)
	SV(ctx context.Context, in *drkey.SVRequest, opts ...grpc.CallOption) (*drkey.SVResponse, error)
}

type dRKeyIntraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDRKeyIntraServiceClient(cc grpc.ClientConnInterface) DRKeyIntraServiceClient {
	return &dRKeyIntraServiceClient{cc}
}

func (c *dRKeyIntraServiceClient) IntraLvl1(ctx context.Context, in *drkey.IntraLvl1Request, opts ...grpc.CallOption) (*drkey.IntraLvl1Response, error) {
	out := new(drkey.IntraLvl1Response)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyIntraService/IntraLvl1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRKeyIntraServiceClient) ASHost(ctx context.Context, in *drkey.ASHostRequest, opts ...grpc.CallOption) (*drkey.ASHostResponse, error) {
	out := new(drkey.ASHostResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyIntraService/ASHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRKeyIntraServiceClient) HostAS(ctx context.Context, in *drkey.HostASRequest, opts ...grpc.CallOption) (*drkey.HostASResponse, error) {
	out := new(drkey.HostASResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyIntraService/HostAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRKeyIntraServiceClient) HostHost(ctx context.Context, in *drkey.HostHostRequest, opts ...grpc.CallOption) (*drkey.HostHostResponse, error) {
	out := new(drkey.HostHostResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyIntraService/HostHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dRKeyIntraServiceClient) SV(ctx context.Context, in *drkey.SVRequest, opts ...grpc.CallOption) (*drkey.SVResponse, error) {
	out := new(drkey.SVResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.DRKeyIntraService/SV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DRKeyIntraServiceServer is the server API for DRKeyIntraService service.
type DRKeyIntraServiceServer interface {
	IntraLvl1(context.Context, *drkey.IntraLvl1Request) (*drkey.IntraLvl1Response, error)
	ASHost(context.Context, *drkey.ASHostRequest) (*drkey.ASHostResponse, error)
	HostAS(context.Context, *drkey.HostASRequest) (*drkey.HostASResponse, error)
	HostHost(context.Context, *drkey.HostHostRequest) (*drkey.HostHostResponse, error)
	SV(context.Context, *drkey.SVRequest) (*drkey.SVResponse, error)
}

// UnimplementedDRKeyIntraServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDRKeyIntraServiceServer struct {
}

func (*UnimplementedDRKeyIntraServiceServer) IntraLvl1(context.Context, *drkey.IntraLvl1Request) (*drkey.IntraLvl1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntraLvl1 not implemented")
}
func (*UnimplementedDRKeyIntraServiceServer) ASHost(context.Context, *drkey.ASHostRequest) (*drkey.ASHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ASHost not implemented")
}
func (*UnimplementedDRKeyIntraServiceServer) HostAS(context.Context, *drkey.HostASRequest) (*drkey.HostASResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostAS not implemented")
}
func (*UnimplementedDRKeyIntraServiceServer) HostHost(context.Context, *drkey.HostHostRequest) (*drkey.HostHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostHost not implemented")
}
func (*UnimplementedDRKeyIntraServiceServer) SV(context.Context, *drkey.SVRequest) (*drkey.SVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SV not implemented")
}

func RegisterDRKeyIntraServiceServer(s *grpc.Server, srv DRKeyIntraServiceServer) {
	s.RegisterService(&_DRKeyIntraService_serviceDesc, srv)
}

func _DRKeyIntraService_IntraLvl1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.IntraLvl1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyIntraServiceServer).IntraLvl1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyIntraService/IntraLvl1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyIntraServiceServer).IntraLvl1(ctx, req.(*drkey.IntraLvl1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DRKeyIntraService_ASHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.ASHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyIntraServiceServer).ASHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyIntraService/ASHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyIntraServiceServer).ASHost(ctx, req.(*drkey.ASHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DRKeyIntraService_HostAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.HostASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyIntraServiceServer).HostAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyIntraService/HostAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyIntraServiceServer).HostAS(ctx, req.(*drkey.HostASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DRKeyIntraService_HostHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.HostHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyIntraServiceServer).HostHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyIntraService/HostHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyIntraServiceServer).HostHost(ctx, req.(*drkey.HostHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DRKeyIntraService_SV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(drkey.SVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DRKeyIntraServiceServer).SV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.DRKeyIntraService/SV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DRKeyIntraServiceServer).SV(ctx, req.(*drkey.SVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DRKeyIntraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.DRKeyIntraService",
	HandlerType: (*DRKeyIntraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntraLvl1",
			Handler:    _DRKeyIntraService_IntraLvl1_Handler,
		},
		{
			MethodName: "ASHost",
			Handler:    _DRKeyIntraService_ASHost_Handler,
		},
		{
			MethodName: "HostAS",
			Handler:    _DRKeyIntraService_HostAS_Handler,
		},
		{
			MethodName: "HostHost",
			Handler:    _DRKeyIntraService_HostHost_Handler,
		},
		{
			MethodName: "SV",
			Handler:    _DRKeyIntraService_SV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/drkey.proto",
}
