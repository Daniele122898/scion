// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/proto/control_plane (interfaces: ChainRenewalServiceServer,TrustMaterialServiceServer,DRKeyIntraServiceServer,DRKeyInterServiceServer)

// Package mock_control_plane is a generated GoMock package.
package mock_control_plane

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	control_plane "github.com/scionproto/scion/go/pkg/proto/control_plane"
	drkey "github.com/scionproto/scion/go/pkg/proto/drkey"
)

// MockChainRenewalServiceServer is a mock of ChainRenewalServiceServer interface.
type MockChainRenewalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChainRenewalServiceServerMockRecorder
}

// MockChainRenewalServiceServerMockRecorder is the mock recorder for MockChainRenewalServiceServer.
type MockChainRenewalServiceServerMockRecorder struct {
	mock *MockChainRenewalServiceServer
}

// NewMockChainRenewalServiceServer creates a new mock instance.
func NewMockChainRenewalServiceServer(ctrl *gomock.Controller) *MockChainRenewalServiceServer {
	mock := &MockChainRenewalServiceServer{ctrl: ctrl}
	mock.recorder = &MockChainRenewalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainRenewalServiceServer) EXPECT() *MockChainRenewalServiceServerMockRecorder {
	return m.recorder
}

// ChainRenewal mocks base method.
func (m *MockChainRenewalServiceServer) ChainRenewal(arg0 context.Context, arg1 *control_plane.ChainRenewalRequest) (*control_plane.ChainRenewalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainRenewal", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.ChainRenewalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainRenewal indicates an expected call of ChainRenewal.
func (mr *MockChainRenewalServiceServerMockRecorder) ChainRenewal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainRenewal", reflect.TypeOf((*MockChainRenewalServiceServer)(nil).ChainRenewal), arg0, arg1)
}

// MockTrustMaterialServiceServer is a mock of TrustMaterialServiceServer interface.
type MockTrustMaterialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTrustMaterialServiceServerMockRecorder
}

// MockTrustMaterialServiceServerMockRecorder is the mock recorder for MockTrustMaterialServiceServer.
type MockTrustMaterialServiceServerMockRecorder struct {
	mock *MockTrustMaterialServiceServer
}

// NewMockTrustMaterialServiceServer creates a new mock instance.
func NewMockTrustMaterialServiceServer(ctrl *gomock.Controller) *MockTrustMaterialServiceServer {
	mock := &MockTrustMaterialServiceServer{ctrl: ctrl}
	mock.recorder = &MockTrustMaterialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrustMaterialServiceServer) EXPECT() *MockTrustMaterialServiceServerMockRecorder {
	return m.recorder
}

// Chains mocks base method.
func (m *MockTrustMaterialServiceServer) Chains(arg0 context.Context, arg1 *control_plane.ChainsRequest) (*control_plane.ChainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chains", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.ChainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chains indicates an expected call of Chains.
func (mr *MockTrustMaterialServiceServerMockRecorder) Chains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chains", reflect.TypeOf((*MockTrustMaterialServiceServer)(nil).Chains), arg0, arg1)
}

// TRC mocks base method.
func (m *MockTrustMaterialServiceServer) TRC(arg0 context.Context, arg1 *control_plane.TRCRequest) (*control_plane.TRCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TRC", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.TRCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TRC indicates an expected call of TRC.
func (mr *MockTrustMaterialServiceServerMockRecorder) TRC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRC", reflect.TypeOf((*MockTrustMaterialServiceServer)(nil).TRC), arg0, arg1)
}

// MockDRKeyIntraServiceServer is a mock of DRKeyIntraServiceServer interface.
type MockDRKeyIntraServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDRKeyIntraServiceServerMockRecorder
}

// MockDRKeyIntraServiceServerMockRecorder is the mock recorder for MockDRKeyIntraServiceServer.
type MockDRKeyIntraServiceServerMockRecorder struct {
	mock *MockDRKeyIntraServiceServer
}

// NewMockDRKeyIntraServiceServer creates a new mock instance.
func NewMockDRKeyIntraServiceServer(ctrl *gomock.Controller) *MockDRKeyIntraServiceServer {
	mock := &MockDRKeyIntraServiceServer{ctrl: ctrl}
	mock.recorder = &MockDRKeyIntraServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDRKeyIntraServiceServer) EXPECT() *MockDRKeyIntraServiceServerMockRecorder {
	return m.recorder
}

// ASHost mocks base method.
func (m *MockDRKeyIntraServiceServer) ASHost(arg0 context.Context, arg1 *drkey.ASHostRequest) (*drkey.ASHostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ASHost", arg0, arg1)
	ret0, _ := ret[0].(*drkey.ASHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ASHost indicates an expected call of ASHost.
func (mr *MockDRKeyIntraServiceServerMockRecorder) ASHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ASHost", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).ASHost), arg0, arg1)
}

// HostAS mocks base method.
func (m *MockDRKeyIntraServiceServer) HostAS(arg0 context.Context, arg1 *drkey.HostASRequest) (*drkey.HostASResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostAS", arg0, arg1)
	ret0, _ := ret[0].(*drkey.HostASResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostAS indicates an expected call of HostAS.
func (mr *MockDRKeyIntraServiceServerMockRecorder) HostAS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostAS", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).HostAS), arg0, arg1)
}

// HostHost mocks base method.
func (m *MockDRKeyIntraServiceServer) HostHost(arg0 context.Context, arg1 *drkey.HostHostRequest) (*drkey.HostHostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostHost", arg0, arg1)
	ret0, _ := ret[0].(*drkey.HostHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostHost indicates an expected call of HostHost.
func (mr *MockDRKeyIntraServiceServerMockRecorder) HostHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostHost", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).HostHost), arg0, arg1)
}

// IntraLvl1 mocks base method.
func (m *MockDRKeyIntraServiceServer) IntraLvl1(arg0 context.Context, arg1 *drkey.IntraLvl1Request) (*drkey.IntraLvl1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntraLvl1", arg0, arg1)
	ret0, _ := ret[0].(*drkey.IntraLvl1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntraLvl1 indicates an expected call of IntraLvl1.
func (mr *MockDRKeyIntraServiceServerMockRecorder) IntraLvl1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntraLvl1", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).IntraLvl1), arg0, arg1)
}

// SV mocks base method.
func (m *MockDRKeyIntraServiceServer) SV(arg0 context.Context, arg1 *drkey.SVRequest) (*drkey.SVResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SV", arg0, arg1)
	ret0, _ := ret[0].(*drkey.SVResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SV indicates an expected call of SV.
func (mr *MockDRKeyIntraServiceServerMockRecorder) SV(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SV", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).SV), arg0, arg1)
}

// MockDRKeyInterServiceServer is a mock of DRKeyInterServiceServer interface.
type MockDRKeyInterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDRKeyInterServiceServerMockRecorder
}

// MockDRKeyInterServiceServerMockRecorder is the mock recorder for MockDRKeyInterServiceServer.
type MockDRKeyInterServiceServerMockRecorder struct {
	mock *MockDRKeyInterServiceServer
}

// NewMockDRKeyInterServiceServer creates a new mock instance.
func NewMockDRKeyInterServiceServer(ctrl *gomock.Controller) *MockDRKeyInterServiceServer {
	mock := &MockDRKeyInterServiceServer{ctrl: ctrl}
	mock.recorder = &MockDRKeyInterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDRKeyInterServiceServer) EXPECT() *MockDRKeyInterServiceServerMockRecorder {
	return m.recorder
}

// Lvl1 mocks base method.
func (m *MockDRKeyInterServiceServer) Lvl1(arg0 context.Context, arg1 *drkey.Lvl1Request) (*drkey.Lvl1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lvl1", arg0, arg1)
	ret0, _ := ret[0].(*drkey.Lvl1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lvl1 indicates an expected call of Lvl1.
func (mr *MockDRKeyInterServiceServerMockRecorder) Lvl1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lvl1", reflect.TypeOf((*MockDRKeyInterServiceServer)(nil).Lvl1), arg0, arg1)
}
