// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/cs/drkey (interfaces: Fetcher,Lvl1PrefetchListKeeper,ServiceEngine)

// Package mock_drkey is a generated GoMock package.
package mock_drkey

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	drkey "github.com/scionproto/scion/go/lib/drkey"
	drkey0 "github.com/scionproto/scion/go/pkg/cs/drkey"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Lvl1 mocks base method.
func (m *MockFetcher) Lvl1(arg0 context.Context, arg1 drkey.Lvl1Meta) (drkey.Lvl1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lvl1", arg0, arg1)
	ret0, _ := ret[0].(drkey.Lvl1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lvl1 indicates an expected call of Lvl1.
func (mr *MockFetcherMockRecorder) Lvl1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lvl1", reflect.TypeOf((*MockFetcher)(nil).Lvl1), arg0, arg1)
}

// MockLvl1PrefetchListKeeper is a mock of Lvl1PrefetchListKeeper interface.
type MockLvl1PrefetchListKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLvl1PrefetchListKeeperMockRecorder
}

// MockLvl1PrefetchListKeeperMockRecorder is the mock recorder for MockLvl1PrefetchListKeeper.
type MockLvl1PrefetchListKeeperMockRecorder struct {
	mock *MockLvl1PrefetchListKeeper
}

// NewMockLvl1PrefetchListKeeper creates a new mock instance.
func NewMockLvl1PrefetchListKeeper(ctrl *gomock.Controller) *MockLvl1PrefetchListKeeper {
	mock := &MockLvl1PrefetchListKeeper{ctrl: ctrl}
	mock.recorder = &MockLvl1PrefetchListKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLvl1PrefetchListKeeper) EXPECT() *MockLvl1PrefetchListKeeperMockRecorder {
	return m.recorder
}

// GetLvl1InfoArray mocks base method.
func (m *MockLvl1PrefetchListKeeper) GetLvl1InfoArray() []drkey0.Lvl1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLvl1InfoArray")
	ret0, _ := ret[0].([]drkey0.Lvl1PrefetchInfo)
	return ret0
}

// GetLvl1InfoArray indicates an expected call of GetLvl1InfoArray.
func (mr *MockLvl1PrefetchListKeeperMockRecorder) GetLvl1InfoArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLvl1InfoArray", reflect.TypeOf((*MockLvl1PrefetchListKeeper)(nil).GetLvl1InfoArray))
}

// Update mocks base method.
func (m *MockLvl1PrefetchListKeeper) Update(arg0 drkey0.Lvl1PrefetchInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockLvl1PrefetchListKeeperMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLvl1PrefetchListKeeper)(nil).Update), arg0)
}

// MockServiceEngine is a mock of ServiceEngine interface.
type MockServiceEngine struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEngineMockRecorder
}

// MockServiceEngineMockRecorder is the mock recorder for MockServiceEngine.
type MockServiceEngineMockRecorder struct {
	mock *MockServiceEngine
}

// NewMockServiceEngine creates a new mock instance.
func NewMockServiceEngine(ctrl *gomock.Controller) *MockServiceEngine {
	mock := &MockServiceEngine{ctrl: ctrl}
	mock.recorder = &MockServiceEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEngine) EXPECT() *MockServiceEngineMockRecorder {
	return m.recorder
}

// DeleteExpiredKeys mocks base method.
func (m *MockServiceEngine) DeleteExpiredKeys(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredKeys", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredKeys indicates an expected call of DeleteExpiredKeys.
func (mr *MockServiceEngineMockRecorder) DeleteExpiredKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredKeys", reflect.TypeOf((*MockServiceEngine)(nil).DeleteExpiredKeys), arg0)
}

// DeriveASHost mocks base method.
func (m *MockServiceEngine) DeriveASHost(arg0 context.Context, arg1 drkey.ASHostMeta) (drkey.ASHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveASHost", arg0, arg1)
	ret0, _ := ret[0].(drkey.ASHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveASHost indicates an expected call of DeriveASHost.
func (mr *MockServiceEngineMockRecorder) DeriveASHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveASHost", reflect.TypeOf((*MockServiceEngine)(nil).DeriveASHost), arg0, arg1)
}

// DeriveHostAS mocks base method.
func (m *MockServiceEngine) DeriveHostAS(arg0 context.Context, arg1 drkey.HostASMeta) (drkey.HostASKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostAS", arg0, arg1)
	ret0, _ := ret[0].(drkey.HostASKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostAS indicates an expected call of DeriveHostAS.
func (mr *MockServiceEngineMockRecorder) DeriveHostAS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostAS", reflect.TypeOf((*MockServiceEngine)(nil).DeriveHostAS), arg0, arg1)
}

// DeriveHostHost mocks base method.
func (m *MockServiceEngine) DeriveHostHost(arg0 context.Context, arg1 drkey.HostHostMeta) (drkey.HostHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostHost", arg0, arg1)
	ret0, _ := ret[0].(drkey.HostHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostHost indicates an expected call of DeriveHostHost.
func (mr *MockServiceEngineMockRecorder) DeriveHostHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostHost", reflect.TypeOf((*MockServiceEngine)(nil).DeriveHostHost), arg0, arg1)
}

// DeriveLvl1 mocks base method.
func (m *MockServiceEngine) DeriveLvl1(arg0 drkey.Lvl1Meta) (drkey.Lvl1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveLvl1", arg0)
	ret0, _ := ret[0].(drkey.Lvl1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveLvl1 indicates an expected call of DeriveLvl1.
func (mr *MockServiceEngineMockRecorder) DeriveLvl1(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveLvl1", reflect.TypeOf((*MockServiceEngine)(nil).DeriveLvl1), arg0)
}

// GetLvl1Key mocks base method.
func (m *MockServiceEngine) GetLvl1Key(arg0 context.Context, arg1 drkey.Lvl1Meta) (drkey.Lvl1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLvl1Key", arg0, arg1)
	ret0, _ := ret[0].(drkey.Lvl1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLvl1Key indicates an expected call of GetLvl1Key.
func (mr *MockServiceEngineMockRecorder) GetLvl1Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLvl1Key", reflect.TypeOf((*MockServiceEngine)(nil).GetLvl1Key), arg0, arg1)
}

// GetLvl1PrefetchInfo mocks base method.
func (m *MockServiceEngine) GetLvl1PrefetchInfo() []drkey0.Lvl1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLvl1PrefetchInfo")
	ret0, _ := ret[0].([]drkey0.Lvl1PrefetchInfo)
	return ret0
}

// GetLvl1PrefetchInfo indicates an expected call of GetLvl1PrefetchInfo.
func (mr *MockServiceEngineMockRecorder) GetLvl1PrefetchInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLvl1PrefetchInfo", reflect.TypeOf((*MockServiceEngine)(nil).GetLvl1PrefetchInfo))
}

// GetSecretValue mocks base method.
func (m *MockServiceEngine) GetSecretValue(arg0 context.Context, arg1 drkey.SVMeta) (drkey.SV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(drkey.SV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockServiceEngineMockRecorder) GetSecretValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockServiceEngine)(nil).GetSecretValue), arg0, arg1)
}
